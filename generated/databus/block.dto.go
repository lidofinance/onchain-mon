// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package databus

import "encoding/json"
import "fmt"

type BlockDtoJson struct {
	// Hash corresponds to the JSON schema field "hash".
	Hash string `json:"hash" yaml:"hash" mapstructure:"hash"`

	// Number corresponds to the JSON schema field "number".
	Number int `json:"number" yaml:"number" mapstructure:"number"`

	// ParentHash corresponds to the JSON schema field "parentHash".
	ParentHash string `json:"parentHash" yaml:"parentHash" mapstructure:"parentHash"`

	// Receipts corresponds to the JSON schema field "receipts".
	Receipts []BlockDtoJsonReceiptsElem `json:"receipts" yaml:"receipts" mapstructure:"receipts"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp int `json:"timestamp" yaml:"timestamp" mapstructure:"timestamp"`
}

type BlockDtoJsonReceiptsElem struct {
	// Logs corresponds to the JSON schema field "logs".
	Logs []BlockDtoJsonReceiptsElemLogsElem `json:"logs" yaml:"logs" mapstructure:"logs"`

	// To corresponds to the JSON schema field "to".
	To *string `json:"to,omitempty" yaml:"to,omitempty" mapstructure:"to,omitempty"`
}

type BlockDtoJsonReceiptsElemLogsElem struct {
	// Address corresponds to the JSON schema field "address".
	Address string `json:"address" yaml:"address" mapstructure:"address"`

	// BlockHash corresponds to the JSON schema field "blockHash".
	BlockHash string `json:"blockHash" yaml:"blockHash" mapstructure:"blockHash"`

	// BlockNumber corresponds to the JSON schema field "blockNumber".
	BlockNumber int `json:"blockNumber" yaml:"blockNumber" mapstructure:"blockNumber"`

	// Data corresponds to the JSON schema field "data".
	Data string `json:"data" yaml:"data" mapstructure:"data"`

	// LogIndex corresponds to the JSON schema field "logIndex".
	LogIndex int `json:"logIndex" yaml:"logIndex" mapstructure:"logIndex"`

	// Removed corresponds to the JSON schema field "removed".
	Removed bool `json:"removed" yaml:"removed" mapstructure:"removed"`

	// Topics corresponds to the JSON schema field "topics".
	Topics []string `json:"topics" yaml:"topics" mapstructure:"topics"`

	// TransactionHash corresponds to the JSON schema field "transactionHash".
	TransactionHash string `json:"transactionHash" yaml:"transactionHash" mapstructure:"transactionHash"`

	// TransactionIndex corresponds to the JSON schema field "transactionIndex".
	TransactionIndex int `json:"transactionIndex" yaml:"transactionIndex" mapstructure:"transactionIndex"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlockDtoJsonReceiptsElemLogsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["address"]; raw != nil && !ok {
		return fmt.Errorf("field address in BlockDtoJsonReceiptsElemLogsElem: required")
	}
	if _, ok := raw["blockHash"]; raw != nil && !ok {
		return fmt.Errorf("field blockHash in BlockDtoJsonReceiptsElemLogsElem: required")
	}
	if _, ok := raw["blockNumber"]; raw != nil && !ok {
		return fmt.Errorf("field blockNumber in BlockDtoJsonReceiptsElemLogsElem: required")
	}
	if _, ok := raw["data"]; raw != nil && !ok {
		return fmt.Errorf("field data in BlockDtoJsonReceiptsElemLogsElem: required")
	}
	if _, ok := raw["logIndex"]; raw != nil && !ok {
		return fmt.Errorf("field logIndex in BlockDtoJsonReceiptsElemLogsElem: required")
	}
	if _, ok := raw["removed"]; raw != nil && !ok {
		return fmt.Errorf("field removed in BlockDtoJsonReceiptsElemLogsElem: required")
	}
	if _, ok := raw["topics"]; raw != nil && !ok {
		return fmt.Errorf("field topics in BlockDtoJsonReceiptsElemLogsElem: required")
	}
	if _, ok := raw["transactionHash"]; raw != nil && !ok {
		return fmt.Errorf("field transactionHash in BlockDtoJsonReceiptsElemLogsElem: required")
	}
	if _, ok := raw["transactionIndex"]; raw != nil && !ok {
		return fmt.Errorf("field transactionIndex in BlockDtoJsonReceiptsElemLogsElem: required")
	}
	type Plain BlockDtoJsonReceiptsElemLogsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BlockDtoJsonReceiptsElemLogsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlockDtoJsonReceiptsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["logs"]; raw != nil && !ok {
		return fmt.Errorf("field logs in BlockDtoJsonReceiptsElem: required")
	}
	type Plain BlockDtoJsonReceiptsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BlockDtoJsonReceiptsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlockDtoJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["hash"]; raw != nil && !ok {
		return fmt.Errorf("field hash in BlockDtoJson: required")
	}
	if _, ok := raw["number"]; raw != nil && !ok {
		return fmt.Errorf("field number in BlockDtoJson: required")
	}
	if _, ok := raw["parentHash"]; raw != nil && !ok {
		return fmt.Errorf("field parentHash in BlockDtoJson: required")
	}
	if _, ok := raw["receipts"]; raw != nil && !ok {
		return fmt.Errorf("field receipts in BlockDtoJson: required")
	}
	if _, ok := raw["timestamp"]; raw != nil && !ok {
		return fmt.Errorf("field timestamp in BlockDtoJson: required")
	}
	type Plain BlockDtoJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BlockDtoJson(plain)
	return nil
}
