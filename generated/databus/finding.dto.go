// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package databus

import "encoding/json"
import "fmt"
import "reflect"

type FindingDtoJson struct {
	// AlertId corresponds to the JSON schema field "alertId".
	AlertId string `json:"alertId" yaml:"alertId" mapstructure:"alertId"`

	// BlockNumber corresponds to the JSON schema field "blockNumber".
	BlockNumber *int `json:"blockNumber,omitempty" yaml:"blockNumber,omitempty" mapstructure:"blockNumber,omitempty"`

	// BlockTimestamp corresponds to the JSON schema field "blockTimestamp".
	BlockTimestamp *int `json:"blockTimestamp,omitempty" yaml:"blockTimestamp,omitempty" mapstructure:"blockTimestamp,omitempty"`

	// BotName corresponds to the JSON schema field "botName".
	BotName string `json:"botName" yaml:"botName" mapstructure:"botName"`

	// Description corresponds to the JSON schema field "description".
	Description string `json:"description" yaml:"description" mapstructure:"description"`

	// FindingBotTimestamp corresponds to the JSON schema field "findingBotTimestamp".
	FindingBotTimestamp *int `json:"findingBotTimestamp,omitempty" yaml:"findingBotTimestamp,omitempty" mapstructure:"findingBotTimestamp,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Severity corresponds to the JSON schema field "severity".
	Severity Severity `json:"severity" yaml:"severity" mapstructure:"severity"`

	// Team corresponds to the JSON schema field "team".
	Team string `json:"team" yaml:"team" mapstructure:"team"`

	// TxHash corresponds to the JSON schema field "txHash".
	TxHash *string `json:"txHash,omitempty" yaml:"txHash,omitempty" mapstructure:"txHash,omitempty"`

	// UniqueKey corresponds to the JSON schema field "uniqueKey".
	UniqueKey string `json:"uniqueKey" yaml:"uniqueKey" mapstructure:"uniqueKey"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FindingDtoJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["alertId"]; raw != nil && !ok {
		return fmt.Errorf("field alertId in FindingDtoJson: required")
	}
	if _, ok := raw["botName"]; raw != nil && !ok {
		return fmt.Errorf("field botName in FindingDtoJson: required")
	}
	if _, ok := raw["description"]; raw != nil && !ok {
		return fmt.Errorf("field description in FindingDtoJson: required")
	}
	if _, ok := raw["name"]; raw != nil && !ok {
		return fmt.Errorf("field name in FindingDtoJson: required")
	}
	if _, ok := raw["severity"]; raw != nil && !ok {
		return fmt.Errorf("field severity in FindingDtoJson: required")
	}
	if _, ok := raw["team"]; raw != nil && !ok {
		return fmt.Errorf("field team in FindingDtoJson: required")
	}
	if _, ok := raw["uniqueKey"]; raw != nil && !ok {
		return fmt.Errorf("field uniqueKey in FindingDtoJson: required")
	}
	type Plain FindingDtoJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = FindingDtoJson(plain)
	return nil
}

type Severity string

const SeverityCritical Severity = "Critical"
const SeverityHigh Severity = "High"
const SeverityInfo Severity = "Info"
const SeverityLow Severity = "Low"
const SeverityMedium Severity = "Medium"
const SeverityUnknown Severity = "Unknown"

var enumValues_Severity = []interface{}{
	"Unknown",
	"Info",
	"Low",
	"Medium",
	"High",
	"Critical",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Severity) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_Severity {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_Severity, v)
	}
	*j = Severity(v)
	return nil
}
